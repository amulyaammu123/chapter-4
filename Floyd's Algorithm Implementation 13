import numpy as np

# Define a large value to represent infinity (no path)
INF = float('inf')

# Step 1: Initialize the Distance Matrix
def initialize_distance_matrix():
    # The example graph's adjacency matrix
    # A  B  C  D  E  F
    graph = [
        [0, 2, INF, 1, INF, INF],  # A
        [2, 0, 3, 2, INF, INF],    # B
        [INF, 3, 0, INF, 1, 5],    # C
        [1, 2, INF, 0, 3, INF],    # D
        [INF, INF, 1, 3, 0, 1],    # E
        [INF, INF, 5, INF, 1, 0]   # F
    ]
    return np.array(graph)

# Step 2: Floyd's Algorithm Implementation
def floyd_warshall(graph):
    num_vertices = len(graph)
    dist = graph.copy()

    for k in range(num_vertices):
        for i in range(num_vertices):
            for j in range(num_vertices):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
                    
    return dist

# Step 3: Simulate Link Failure
def simulate_link_failure(graph, u, v):
    graph[u][v] = INF
    graph[v][u] = INF
    return graph

# Display the shortest path distance
def display_shortest_path(dist_matrix, start, end):
    routers = ["A", "B", "C", "D", "E", "F"]
    print(f"Shortest path from {routers[start]} to {routers[end]} = {dist_matrix[start][end]}")

# Main function to run the steps
def main():
    # Initialize the distance matrix
    graph = initialize_distance_matrix()
    
    # Calculate the shortest paths before the link failure
    shortest_paths_before = floyd_warshall(graph)
    
    # Display the shortest path from A to F before the link failure
    print("Before link failure:")
    display_shortest_path(shortest_paths_before, 0, 5)  # A to F
    
    # Simulate the link failure between Router B and Router D
    graph_with_failure = simulate_link_failure(graph, 1, 3)
    
    # Recalculate the shortest paths after the link failure
    shortest_paths_after = floyd_warshall(graph_with_failure)
    
    # Display the shortest path from A to F after the link failure
    print("After link failure:")
    display_shortest_path(shortest_paths_after, 0, 5)  # A to F

# Run the main function
main()
