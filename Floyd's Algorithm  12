import sys

def initialize_distance_matrix(n, edges):
    # Initialize distance matrix with infinities and 0s for diagonal (self-loops)
    inf = sys.maxsize
    distance = [[inf] * n for _ in range(n)]
    
    for i in range(n):
        distance[i][i] = 0  # Distance from a vertex to itself is 0
    
    # Populate the distance matrix with given edges
    for u, v, w in edges:
        distance[u][v] = w  # Direct edge from u to v with weight w
        distance[v][u] = w  # Assuming undirected graph
    
    return distance

def floyds_algorithm(n, edges):
    # Initialize the distance matrix
    distance = initialize_distance_matrix(n, edges)
    
    # Applying Floyd's algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if distance[i][j] > distance[i][k] + distance[k][j]:
                    distance[i][j] = distance[i][k] + distance[k][j]
    
    return distance

def print_distance_matrix(distance):
    n = len(distance)
    print("Distance Matrix:")
    for i in range(n):
        for j in range(n):
            if distance[i][j] == sys.maxsize:
                print("{:7}".format("inf"), end=" ")
            else:
                print("{:7}".format(distance[i][j]), end=" ")
        print()

def find_shortest_path(distance, start, end):
    shortest_path = distance[start][end]
    return shortest_path

# Example usage
if __name__ == "__main__":
    # Example test case a)
    n = 4
    edges_a = [
        [0, 1, 3],
        [1, 2, 1],
        [1, 3, 4],
        [2, 3, 1]
    ]
    
    distance_matrix_a = floyds_algorithm(n, edges_a)
    print_distance_matrix(distance_matrix_a)
    
    shortest_path_a = find_shortest_path(distance_matrix_a, 0, 2)
    print(f"\nShortest path from City 1 to City 3: {shortest_path_a}\n")
    
    # Example test case b)
    n = 6
    edges_b = [
        [0, 1, 1],
        [0, 2, 5],
        [1, 2, 2],
        [1, 3, 1],
        [2, 4, 3],
        [3, 4, 1],
        [3, 5, 6],
        [4, 5, 2]
    ]
    
    distance_matrix_b = floyds_algorithm(n, edges_b)
    print_distance_matrix(distance_matrix_b)
    
    shortest_path_b = find_shortest_path(distance_matrix_b, 0, 4)
    print(f"\nShortest path from Router A to Router E: {shortest_path_b}\n")
