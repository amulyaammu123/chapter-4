def longest_palindromic_substring(s):
    n = len(s)
    
    if n == 0:
        return ""
    
    # Initialize a table to store the palindrome status
    dp = [[False] * n for _ in range(n)]
    
    # Every single character is a palindrome
    start = 0
    max_length = 1
    for i in range(n):
        dp[i][i] = True
    
    # Check for 2-character palindromes
    for i in range(n - 1):
        if s[i] == s[i + 1]:
            dp[i][i + 1] = True
            start = i
            max_length = 2
    
    # Check for palindromes longer than 2 characters
    for length in range(3, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            
            if s[i] == s[j] and dp[i + 1][j - 1]:
                dp[i][j] = True
                start = i
                max_length = length
    
    return s[start:start + max_length]

# Example usage
s = "babad"
print("Input:", s)
print("Output:", longest_palindromic_substring(s))
