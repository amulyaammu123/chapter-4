import heapq

def networkDelayTime(times, n, k):
    # Step 1: Create graph adjacency list
    graph = [[] for _ in range(n + 1)]
    for u, v, w in times:
        graph[u].append((v, w))
    
    # Step 2: Dijkstra's algorithm
    # Initialize distances from source k to all nodes, set to infinity initially
    dist = [float('inf')] * (n + 1)
    dist[k] = 0
    
    # Priority queue for Dijkstra's algorithm (min-heap)
    pq = [(0, k)]  # (distance, node)
    
    while pq:
        curr_dist, u = heapq.heappop(pq)
        
        # If current distance is greater than recorded distance, skip it
        if curr_dist > dist[u]:
            continue
        
        # Explore neighbors
        for v, w in graph[u]:
            if curr_dist + w < dist[v]:
                dist[v] = curr_dist + w
                heapq.heappush(pq, (dist[v], v))
    
    # Step 3: Determine the maximum distance to any node
    max_time = max(dist[1:])
    
    # Check if any node is unreachable
    if max_time == float('inf'):
        return -1
    
    return max_time

# Example:
times = [[2, 1, 1], [2, 3, 1], [3, 4, 1]]
n = 4
k = 2
print(networkDelayTime(times, n, k))  # Output: 2
