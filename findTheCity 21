def findTheCity(n, edges, distanceThreshold):
    # Initialize the distance matrix with infinity
    dist = [[float('inf')] * n for _ in range(n)]
    
    # Distance to self is zero
    for i in range(n):
        dist[i][i] = 0
    
    # Fill the initial distances based on the edges
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w
    
    # Floyd-Warshall Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    # Find the city with the smallest number of reachable cities within the threshold
    min_reachable_cities = float('inf')
    result_city = -1
    
    for i in range(n):
        reachable_cities = sum(dist[i][j] <= distanceThreshold for j in range(n))
        
        if reachable_cities < min_reachable_cities or (reachable_cities == min_reachable_cities and i > result_city):
            min_reachable_cities = reachable_cities
            result_city = i
    
    return result_city

# Example 1
n1 = 4
edges1 = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distanceThreshold1 = 4
print(findTheCity(n1, edges1, distanceThreshold1))  # Output: 3
