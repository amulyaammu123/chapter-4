def optimal_bst(keys, freq, n):
    # Create cost matrix and root matrix
    cost = [[0 for _ in range(n)] for _ in range(n)]
    root = [[0 for _ in range(n)] for _ in range(n)]
    
    # Initialize the cost for single keys
    for i in range(n):
        cost[i][i] = freq[i]
    
    # Sum of frequencies
    def sum_freq(i, j):
        return sum(freq[i:j+1])
    
    # Fill the cost and root tables
    for L in range(2, n + 1):  # L is the chain length
        for i in range(n - L + 1):
            j = i + L - 1
            cost[i][j] = float('inf')
            
            for r in range(i, j + 1):
                c = (cost[i][r - 1] if r > i else 0) + (cost[r + 1][j] if r < j else 0) + sum_freq(i, j)
                if c < cost[i][j]:
                    cost[i][j] = c
                    root[i][j] = r + 1
    
    return cost, root

def print_matrix(matrix, title):
    print(title)
    for row in matrix:
        print("\t".join(map(str, row)))
    print()

# Main function to run the OBST algorithm
def main():
    keys = [10, 12, 16, 21]
    freq = [4, 2, 6, 3]
    n = len(keys)

    cost, root = optimal_bst(keys, freq, n)
    
    # Print the resulting cost and root matrices
    print_matrix(cost, "Cost Table")
    print_matrix(root, "Root Table")
    
    # Print the cost of the optimal BST
    print(f"Cost of the optimal BST: {cost[0][n-1]}")

# Run the main function
main()
